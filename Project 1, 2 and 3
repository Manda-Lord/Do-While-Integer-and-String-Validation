// Do-While Integer Validation Project 1

#nullable enable

string? userInput;
int numericValue = 0;
bool inputValid = false;

Console.WriteLine("Enter an integer value between 5 and 10.");

do
{
    userInput = Console.ReadLine();

    if (string.IsNullOrWhiteSpace(userInput))
        Console.WriteLine("Cannot be left blank.");

    else
    {
        bool isNumeric = int.TryParse(userInput, out numericValue);

        if (!isNumeric)
            Console.WriteLine("Sorry, you entered a non-numeric value, please try again.");

        else if (numericValue < 5 || numericValue > 10)
            Console.Write($"You enetered {numericValue}. Please enter a number between 5 and 10.");

        else
        {
            inputValid = true;
            Console.WriteLine($"Your input value ({numericValue}) has been accepted.");
        }
    }
} while (!inputValid);

#nullable disable

// Do-While String Validation Project 2

// I've used a warning supressing null-forgiving operator "!" in combination with the #nullable enable/disable directive.
// This should be used cautiously, as it doesn't address the underlying issue.
// This enables nullable reference types and ensures the compiler will check for potential null reference issues. This is good practice to catch potential null errors at compile time.

#nullable enable

string? userInput;

bool validRole = false;

string adminRole   = "administrator";
string managerRole = "manager";
string userRole    = "user";

Console.WriteLine("Enter your role: Administrator, Manager or User.");

do
{
    userInput = Console.ReadLine();

    if (string.IsNullOrWhiteSpace(userInput))
        Console.WriteLine("Cannot be left blank.");
    
    else
    {
        string inputCleaned = userInput!.Trim().ToLower();

        if (inputCleaned == roleAdministrator || inputCleaned == roleManager || inputCleaned == roleUser)
        {
            validInput = true;
            Console.WriteLine($"Your input value ({inputCleaned}) has been accepted.");
        }
        else
            Console.WriteLine($"The role name you entered, \"{inputCleaned}\" is not valid.");
    }
} while (!validInput);

#nullable disable

// Above the "!" operator is used to silence the warning; remember that this is only a warning suppresant.
// Itâ€™s generally better to handle potential null values explicitly.
// Below the code will remove the warning entirely, as it addresses the issue directly.

#nullable enable

string? userInput;

bool validRole = false;

string adminRole   = "administrator";
string managerRole = "manager";
string userRole    = "user";

do
{
    Console.WriteLine("Enter your role: Administrator, Manager or User.");

    userInput = Console.ReadLine();

    if (string.IsNullOrWhiteSpace(userInput))
    {
        Console.WriteLine("Input cannot be empty. Please enter a valid role.");
        continue;
    }

    string inputCleaned = userInput.Trim().ToLower();

    if (inputCleaned == adminRole || inputCleaned == managerRole || inputCleaned == userRole)
    {
        validRole = true;
        Console.WriteLine($"Your input value ({inputCleaned}) has been accepted.");
    }
    else if (validRole == false)
    {
        Console.WriteLine($"The role name that you entered, \"{inputCleaned}\" is not valid.");
    }
    
} while (!validRole);

#nullable disable

// For Content Processing Array Project 3

string[] myStrings = new string[2] { "I like pizza. I like roast chicken. I like salad", "I like all three of the menu choices" };
int stringCount = myStrings.Length;

string myString = "";
int periodLocation = 0;

for (int i = 0; i < stringCount; i++)
{
    myString = myStrings[i];
    periodLocation = myString.IndexOf(".");

    string mySentence;

    // extract sentences from each string and display them one at a time
    while (periodLocation != -1)
    {
        // first sentence is the string value to the left of the period location
        mySentence = myString.Remove(periodLocation);

        // the remainder of myString is the string value to the right of the period location
        myString = myString.Substring(periodLocation + 1);

        // remove any leading white-space from myString
        myString = myString.TrimStart();

        // update the comma location and increment the counter
        periodLocation = myString.IndexOf(".");

        Console.WriteLine(mySentence);
    }

    mySentence = myString.Trim();
    Console.WriteLine(mySentence);
}
